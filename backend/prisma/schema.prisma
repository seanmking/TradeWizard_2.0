generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  MULTIPLE_CHOICE
  BOOLEAN
  TEXT
  NUMERIC
}

enum QuestionLevel {
  BASELINE
  FOLLOW_UP
  SECTOR_SPECIFIC
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  stage          String
  businessInfo   Json
  marketData     Json?
  selectedMarket String?
  completedStages String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, stage])
}

model HSCode {
  id          String   @id @default(uuid())
  code        String   @unique
  description String
  section     String
  chapter     String
  heading     String
  subheading  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HSCodeMapping {
  id          String   @id @default(uuid())
  code        String
  name        String
  description String
  category    String
  subcategory String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([code])
  @@index([name])
}

model ComplianceRequirement {
  id            String   @id @default(uuid())
  hsCodePrefix  String
  market        String
  requirements  String[]
  certifications String[]
  documentation String[]
  restrictions  String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([hsCodePrefix, market])
}

model MarketIntelligence {
  id            String   @id @default(uuid())
  hsCodePrefix  String
  market        String
  competing_products Json
  price_point_recommendation String
  market_entry_difficulty String
  potential_advantage String
  market_size  Float
  growth_rate  Float
  key_competitors String[]
  entry_barriers String[]
  regulatory_requirements String[]
  validUntil   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([hsCodePrefix, market])
  @@index([validUntil])
}

model Conversation {
  id        String   @id
  userId    String
  memory    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  name          String
  description   String?
  category      String?
  specifications Json?
  manufacturer   String?
  origin        String?
  images        String[]
  hsCode        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
  @@index([hsCode])
  @@index([userId])
}

model AssessmentCategory {
  id                String               @id @default(uuid())
  name              String
  description       String
  displayOrder      Int
  marketingHeadline String?
  marketingText     String?
  questions         AssessmentQuestion[]
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model AssessmentQuestion {
  id                   String             @id @default(uuid())
  categoryId           String
  category             AssessmentCategory @relation(fields: [categoryId], references: [id])
  questionText         String
  marketingPrefix      String?
  questionType         QuestionType
  required             Boolean            @default(true)
  displayOrder         Int
  level                QuestionLevel
  sectorRelevance      String[]
  dependsOnQuestionId  String?
  dependsOnAnswerValue String?
  mcpRequirements      Json?
  responseOptions      Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  responses            Response[]
}

model Response {
  id          String             @id @default(uuid())
  userId      String
  questionId  String
  question    AssessmentQuestion @relation(fields: [questionId], references: [id])
  answerValue String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model AssessmentProgress {
  id                   String   @id @default(uuid())
  userId               String   @unique
  currentCategoryId    String?
  completedCategoryIds String[]
  completedQuestionIds String[]
  overallProgress      Float    @default(0)
  estimatedCompletionTime Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AssessmentScore {
  id              String   @id @default(uuid())
  userId          String   @unique
  categoryScores  Json
  overallScore    Float
  confidenceLevel Float
  lastCalculated  DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
} 