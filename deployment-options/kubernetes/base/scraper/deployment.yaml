apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-scraper
  labels:
    app: web-scraper
    component: data-collection
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-scraper
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: web-scraper
        component: data-collection
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: web-scraper
        image: tradewizard/scraper:${VERSION}
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 9100
          name: metrics
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: REDIS_URL
        - name: SCRAPER_MAX_CONCURRENT_JOBS
          valueFrom:
            configMapKeyRef:
              name: scraper-config
              key: MAX_CONCURRENT_JOBS
        - name: SCRAPER_DEFAULT_RATE_LIMIT
          valueFrom:
            configMapKeyRef:
              name: scraper-config
              key: DEFAULT_RATE_LIMIT
        - name: SCRAPER_JOB_TIMEOUT_MS
          valueFrom:
            configMapKeyRef:
              name: scraper-config
              key: JOB_TIMEOUT_MS
        - name: SCRAPER_USER_AGENT
          valueFrom:
            configMapKeyRef:
              name: scraper-config
              key: USER_AGENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: scraper-config
              key: LOG_LEVEL
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        volumeMounts:
        - name: scraper-config-volume
          mountPath: /app/config
        - name: scraper-domains-volume
          mountPath: /app/config/domains
        - name: log-volume
          mountPath: /app/logs
      - name: rate-limiter-proxy
        image: traefik:v2.9
        ports:
        - containerPort: 8080
          name: admin
        args:
        - --api.insecure=true
        - --providers.file.directory=/etc/traefik/dynamic
        - --providers.file.watch=true
        - --entrypoints.web.address=:8080
        - --accesslog=true
        - --accesslog.filepath=/logs/access.log
        - --log.level=INFO
        volumeMounts:
        - name: traefik-config
          mountPath: /etc/traefik/dynamic
        - name: log-volume
          mountPath: /logs
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /ping
            port: admin
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: scraper-config-volume
        configMap:
          name: scraper-config
      - name: scraper-domains-volume
        configMap:
          name: scraper-domains-config
      - name: traefik-config
        configMap:
          name: traefik-config
      - name: log-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web-scraper
              topologyKey: kubernetes.io/hostname
      # Use security context to limit permissions
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: web-scraper
  labels:
    app: web-scraper
    component: data-collection
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    name: http
  - port: 9100
    targetPort: metrics
    name: metrics
  selector:
    app: web-scraper
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scraper-config
data:
  MAX_CONCURRENT_JOBS: "10"
  DEFAULT_RATE_LIMIT: "10"
  JOB_TIMEOUT_MS: "30000"
  USER_AGENT: "TradeWizard-WebAnalyzer/1.0 (+https://tradewizard.com/bot)"
  LOG_LEVEL: "info"
  config.json: |
    {
      "maxConcurrentJobs": 10,
      "defaultRateLimit": {
        "requestsPerMinute": 10,
        "concurrentRequests": 2,
        "requestsWindow": 60000
      },
      "domainRateLimits": {
        "example.com": {
          "requestsPerMinute": 5,
          "concurrentRequests": 1,
          "requestsWindow": 60000
        },
        "hightraffic.com": {
          "requestsPerMinute": 2,
          "concurrentRequests": 1,
          "requestsWindow": 120000
        }
      },
      "retryDelayMs": 5000,
      "maxRetries": 3,
      "jobTimeoutMs": 30000,
      "proxyEnabled": false,
      "proxies": [],
      "userAgent": "TradeWizard-WebAnalyzer/1.0 (+https://tradewizard.com/bot)"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scraper-domains-config
data:
  domains-ratelimits.json: |
    {
      "example.com": {
        "requestsPerMinute": 5,
        "concurrentRequests": 1,
        "requestsWindow": 60000
      },
      "hightraffic.com": {
        "requestsPerMinute": 2,
        "concurrentRequests": 1,
        "requestsWindow": 120000
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
data:
  middlewares.yaml: |
    http:
      middlewares:
        global-rate-limit:
          rateLimit:
            average: 100
            burst: 50
            period: 1m
        example-com-rate-limit:
          rateLimit:
            average: 5
            burst: 10
            period: 1m
            sourceCriterion:
              requestHost: true
        high-traffic-rate-limit:
          rateLimit:
            average: 2
            burst: 5
            period: 2m
            sourceCriterion:
              requestHost: true
      routers:
        web-scraper:
          entryPoints:
            - web
          service: web-scraper
          middlewares:
            - global-rate-limit
          rule: "PathPrefix(`/`)"
        example-com:
          entryPoints:
            - web
          service: web-scraper
          middlewares:
            - example-com-rate-limit
          rule: "HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.example.com`) || Host(`example.com`)"
        high-traffic:
          entryPoints:
            - web
          service: web-scraper
          middlewares:
            - high-traffic-rate-limit
          rule: "HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.hightraffic.com`) || Host(`hightraffic.com`)"
      services:
        web-scraper:
          loadBalancer:
            servers:
              - url: "http://localhost:3001"
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-scraper-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-scraper
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
    scaleUp:
      stabilizationWindowSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web-scraper-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: web-scraper
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-scraper-network-policy
spec:
  podSelector:
    matchLabels:
      app: web-scraper
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: backend-api
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 9100
  egress:
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - to:
    - podSelector:
        matchLabels:
          app: redis-cluster
    ports:
    - protocol: TCP
      port: 6379 